⁡⁢⁢⁢​‌‌‌Redux:​⁡

### Plain-Redux ### resource: https://www.youtube.com/playlist?list=PLQtNtS-WfRa9LbmD8ON7rWhn-AtKTGdkn

- After create redux store
* console.log(store) // to see the store methods (getState, dispatch, subscribe, applyMiddleware)
* console.log(store.getState()) // to see all the state in the store
* store.dispatch({type: 'ADD'}) // to dispatch an action
* console.log(store.getState()) // to see the new state after dispatching the action
* store.dispatch({type: 'ADD'}) // to dispatch an action again
* console.log(store.getState()) // to see the new state after dispatching the action again
* store.subscribe(() => console.log("Current state is: ", store.getState())) // to subscribe to the store
difference between subscribe and getState is that subscribe will be called every time the state is changed but getState will be called only once when you call it

* store.dispatch({type: 'ADD', payload: 5}) // to dispatch an action with payload

// we can write action with different ways
action = {
    type: 'ADD',
    payload: 5
}
store.dispatch(action)

const add = () => {
    return {
        type: 'ADD',
        payload: 5
    }
}
store.dispatch(add())

const add = (amount) => {
    return {
        type: 'ADD',
        payload: amount
    }
}
store.dispatch(add(5))

(rq: use constante for action type, ex: const DECREMENT = 'DECREMENT', action = {type: DECREMENT, payload: 5})

const reducer = (state = 0, action) => {
    switch(action.type) {
        case DECREMENT
            return state - action.payload
        case INCREMENT
            return state + action.payload
        default
            return state
    }
}

const store = Redux.createStore(reducer)

* if we have many reducers, we can combine them in one reducer
const rootReducer = Redux.combineReducers({
    decrement: decrementReducer,
    increment: incrementReducer
})
const store = Redux.createStore(rootReducer)

(rq: action will pass to all reducers, so we need to check the action type in each reducer should be unique)

* if we call api in reducer, we need to use redux-thunk
const store = Redux.createStore(reducer, Redux.applyMiddleware(ReduxThunk))
Example: (fetch data from api)
// action creator
const getUsers = (getting) => {
    return {
        type: 'GET_USERS',
        payload: getting
    }
}
const fetchUsers = () => {
    return async (dispatch) => {
        const response = await fetch('https://jsonplaceholder.typicode.com/users')
        const data = await response.json()
        dispatch(getUsers(data))
    }
}
// reducer
const reducer = (state = [], action) => {
    switch(action.type) {
        case 'GET_USERS':
            return action.payload
        default
            return state
    }
}

​‌‌‌‍‍‍‍⁡⁢⁣⁢‍### ℝ𝕖𝕒𝕔𝕥-ℝ𝕖𝕕𝕦𝕩 ###⁡​​

const DESCREMENT = 'DECREMENT'
const decrement = (howMuch) { // if i write (payload) inteadOf (howMuch) i return {type: DECREMENT, payload}
  return {
    type: DECREMENT,
    payload: howMuch
  }
}
const decrementReducer = (state = 5, action) => {
  switch(action.type) {
    case DECREMENT:
      return state - action.payload
    default:
      return state
  }
}
* "Provider" from "react-redux" is used to provide the store to the app
<Provider store={store}>
    <App />
</Provider>

* "createStore" from "redux" is used to create the store
const store = createStore(reducer)

* "combineReducers" from "redux" is used to combine reducers
const rootReducer = combineReducers({
    decrement: decrementReducer,
    increment: incrementReducer
})
const store = createStore(rootReducer)

* "applyMiddleware" from "redux" is used to apply middleware
* "thunk" from "redux-thunk" is used to apply thunk middleware
const store = createStore(rootReducer, applyMiddleware(thunk))

* "useSelector" from "react-redux" is used to get the state from the store
const count = useSelector(state => state.decrement)
console.log(count) // return 5

* "useDispatch" from "react-redux" is used to dispatch an action
const dispatch = useDispatch()
<Button onClick={() => dispatch(decrement(100))}>Decrement</Button>

⁡⁢⁣⁢​‌‌‌### ℝ𝕖𝕒𝕔𝕥-ℝ𝕖𝕕𝕦𝕩-𝕋𝕠𝕠𝕝𝕜𝕚𝕥 (𝕋𝕙𝕦𝕟𝕜) ###⁡​
​
* "configureStore" from "@reduxjs/toolkit" is used to create the store
const store = configureStore({
    reducer: {
        decrement: decrementReducer,
        increment: incrementReducer
    },
    devTools: true // default is true but set it to false in production
})

* "createSlice" from "@reduxjs/toolkit" is used to create a slice
const decrementSlice = createSlice({
    name: 'decrement', // try to use unique name for each slice
    initialState: 5,
    reducers: {
        decrementN: (state, action) => {
            console.log(action) // return {type: 'decrement/decrementN', payload: 100} if i dispatch(decrementN(100)) in the app
            return state - action.payload // return 5 - 100 = -95
        }
    }
})
const {decrementN} = decrementSlice.actions
const decrementReducer = decrementSlice.reducer

* action in old redux is {type: 'DECREMENT', payload: 100} but in redux-toolkit is {type: 'decrement/decrementN', payload: 100}

* "createAsyncThunk" from "@reduxjs/toolkit" is used to create an async action
const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {
    const response = await fetch('https://jsonplaceholder.typicode.com/users')
    const data = await response.json()
    return data
})
const usersSlice = createSlice({
    name: 'users',
    initialState: [],
    reducers: {},
    extraReducers: (builder) => {
        builder.addCase(fetchUsers.fulfilled, (state, action) => {
            console.log(action) // return {type: 'users/fetchUsers/fulfilled', payload: [{...}, {...}, ...]} if i dispatch(fetchUsers()) in the app
            return action.payload
        })
    }
})
const usersReducer = usersSlice.reducer

Example cart:
const totalPrice = cart.reduce((acc, item) => acc += item.price*item.quantity, 0)
* in silce=>reducers=>addToCart: we can use findProduct = cart.find(item => item.id === action.payload.id)
* in silce=>reducers=>addToCart: we can use productClone = {...action.payload, quantity: 1}

⁡⁢⁣⁢​‌‌‌### ℝ𝕖𝕒𝕔𝕥-ℝ𝕖𝕕𝕦𝕩-𝕋𝕠𝕠𝕝𝕜𝕚𝕥 ℚ𝕦𝕖𝕣𝕪 ###⁡​

⁡⁣⁣⁢1) make a new file that will create the api (apis/albumApi.js)⁡
import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react'
export const albumsApi = createApi({
    reducerPath: 'albums',
    baseQuery: fetchBaseQuery({baseUrl: 'https://jsonplaceholder.typicode.com'}),
    endpoints(builder) {
        return {
            fetchAlbums: builder.query({ // builder.query is used in fetch
                providesTags: (result, error, user) => {
                    const tags = result.map(album => ({type: 'Album', id: album.id}))
                    tags.push({type: 'UsersAlbums', id: user.id})
                    return tags
                },
                query: (user) => {
                    return {
                        url: "/albums"
                        params: {
                            userId: user.id
                        },
                        method: 'GET'
                    }
                }
            })
            addAlbum: builder.mutation({ // builder.mutation is used in post
                invalidatesTags: (result, error, user) => {
                    return [{type: 'UsersAlbums', id: user.id}]
                },
                query: (user) => {
                    return {
                        url: "/albums",
                        method: 'POST',
                        body: {
                            userId: user.id,
                            title: 'new album'
                        }
                    }
                }
            })
            removeAlbum: builder.mutation({ // builder.mutation is used in delete
                invalidatesTags: (result, error, album) => {
                    return [{type: 'Album', id: album.id}]
                },
                query: (album) => {
                    return {
                        url: `/albums/${album.id}`,
                        method: 'DELETE'
                    }
                }
            })
        }
    }
})
export const {useFetchAlbumsQuery, useAddAlbumMutation, useRemoveAlbumMutation} = albumsApi
export {albumsApi};

⁡⁣⁣⁢2) call the api in the store (store.js)⁡
import { setupListeners } from '@reduxjs/toolkit/query'
import {albumsApi} from './apis/albumsApi'
export const store = configureStore({
    reducer: {
        // albums: albumsApi.reducer
        [albumsApi.reducerPath]: albumsApi.reducer
    },
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(albumsApi.middleware)
})
setupListeners(store.dispatch)
export { useFetchAlbumsQuery, useAddAlbumMutation, useRemoveAlbumMutation } from './apis/albumsApi'

⁡⁣⁣⁢3) call the api in the component (components/Albums.js)⁡⁡
import {useFetchAlbumsQuery, useAddAlbumMutation, useRemoveAlbumMutation} from '../store'
const Albums = () => {
    const {data, error, isFetching} = useFetchAlbumsQuery(user)
    const [addAlbum, results] = useAddAlbumMutation()
    const [removeAlbum, removeAlbumResults] = useRemoveAlbumMutation()
    return (
        <div>
            {isFetching && <p>Loading...</p>}
            {error && <p>{error}</p>}
            {data && data.map(album => (
                <div key={album.id}>
                    <p>{album.title}</p>
                    <button onClick={() => removeAlbum(album)}>Remove Album</button>
                </div>
            ))}
            <button onClick={() => addAlbum(user)}>Add Album</button>
        </div>
    )
}
